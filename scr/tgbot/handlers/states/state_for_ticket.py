from aiogram import types, dispatcher
from aiogram.dispatcher.filters import Text

from tgbot.database.db_sqlite import DataBaseHelper
from settings.const import SUPPORT_CHAT
from tgbot.misc.ticket_format import format
from tgbot.misc.bad_words_filter import has_bad_words
from tgbot.misc.states.ticket_state import TicketForm
from tgbot.keyboards.reply import(
    cancel_keyboard,
    confirm_keyboard,
    theme_keyboard,
    main_keyboard
)

async def confirm_handler(message: types.Message, state: dispatcher.FSMContext):
    async with state.proxy() as data:
        try:
            keyboard = main_keyboard()
            db = DataBaseHelper()
            if has_bad_words(format(data)):
                await message.answer(
                    "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–∏–≤ —ç—Ç–∏ —Å–ª–æ–≤–∞"
                )
                return
            data_to_save = []
            data_to_save.append(message.from_user.id)
            data_to_save.append(format(data))

            db.save_active_ticket(data_to_save)
            
            try:
                get_id = db.user_last_ticket()[0][0]
            except IndexError:
                get_id = 1
            
            await message.bot.send_message(
                int(SUPPORT_CHAT),
                f"{get_id}\n" + \
                f"{message.from_user.id}\n" + \
                "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ–±—Ä–∞—â–µ–Ω–∏—è\n" + \
                f"{format(data)}"
            )

            await message.answer(
                f"–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {get_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞",
                reply_markup=keyboard
            )
            
        except Exception:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id
            )
        finally:
            await state.finish()

async def cancel_handler(message: types.Message, state: dispatcher.FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    await state.finish()

    keyboard = main_keyboard()

    await message.answer(
        "–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboard
    )

async def start_new_form(
        message: types.Message, state: dispatcher.FSMContext
        ) -> None:
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    keyboard = theme_keyboard()
    await message.answer(
        "<b>–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n" + \
        "–í–æ–∑–º–æ–∂–Ω–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–∑–¥–µ–ª–µ FAQ"
    )
    await message.answer(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–æ–∑–Ω–∞—á—å—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è\n" + \
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ç–µ–º—É, –Ω–∞–ø–∏—Å–∞–≤ –µ—ë —Ç–µ–∫—Å—Ç–æ–º",
        reply_markup=keyboard
    )
    await TicketForm.first()

async def save_ticket_theme(
        message: types.Message, state: dispatcher.FSMContext
        ) -> None:
    if not message.text:
        await message.bot.send_message(
            message.from_user.id,
            "–Ø –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –º–Ω–µ –ø–∏—à—É—Ç —Ç–µ–∫—Å—Ç–æ–ºüòâ"
        )
        return
    
    async with state.proxy() as data:
        data["theme"] = message.text
    await TicketForm.next()
    
    keyboard = cancel_keyboard()
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ —Å—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è",
        reply_markup=keyboard
    )

async def save_ticket_discription(
        message: types.Message, state: dispatcher.FSMContext
        ) -> None:
    if not message.text:
        await message.bot.send_message(
            message.from_user.id,
            "–Ø –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –º–Ω–µ –ø–∏—à—É—Ç —Ç–µ–∫—Å—Ç–æ–ºüòâ"
        )
        return
    
    async with state.proxy() as data:
        data["discription"] = message.text
    await TicketForm.next()

    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ, –∏–∑–ª–æ–∂–∏–≤ –≤—Å–µ –º–µ–ª–æ—á–∏"
    )

async def save_ticket_appeal(
        message: types.Message, state: dispatcher.FSMContext
        ) -> None:
    if not message.text:
        await message.bot.send_message(
            message.from_user.id,
            "–Ø –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –º–Ω–µ –ø–∏—à—É—Ç —Ç–µ–∫—Å—Ç–æ–ºüòâ"
        )
        return
    async with state.proxy() as data:
        keyboard = confirm_keyboard()
        try:
            if data["appeal"] is not None:
                await message.answer(
                    "–ë—É–¥–µ—Ç –ª—É—á—à–µ, –µ—Å–ª–∏ –í—ã —É–∫–∞–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
                    reply_markup=keyboard
                )
                return
        except Exception:
            data["appeal"] = message.text
            data["user"] = message.from_user.username

    await message.answer(
        text=format(data),
        reply_markup=keyboard
    )


def register_ticket_form(dp: dispatcher.Dispatcher):
    dp.register_message_handler(
        confirm_handler,
        Text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ"),
        state="*"
    )
    dp.register_message_handler(
        cancel_handler,
        Text("–û—Ç–º–µ–Ω–∏—Ç—åüõë"),
        state="*"
    )
    dp.register_message_handler(
        start_new_form,
        Text("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—Éüì®"),
        state="*"
    )
    dp.register_message_handler(
        save_ticket_theme,
        state=TicketForm.theme,
        content_types="any"
    )
    dp.register_message_handler(
        save_ticket_discription,
        state=TicketForm.discription,
        content_types="any"
    )
    dp.register_message_handler(
        save_ticket_appeal,
        state=TicketForm.appeal,
        content_types="any"
    )
